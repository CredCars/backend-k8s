name: Deploy Backend to EKS

on:
  push:
    branches:
      - staging
      - main

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  ECR_BACKEND: ${{ vars.ECR_BACKEND }}  # e.g., credcars-backend
  EKS_CLUSTER: ${{ vars.EKS_CLUSTER }}  # e.g., credcars-cluster

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Build app
        run: npm ci && npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ vars.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        id: build-image
        run: |
          IMAGE_TAG=${GITHUB_SHA::8}
          REPO_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_BACKEND }}
          docker build -t ${REPO_URI}:${IMAGE_TAG} .
          docker push ${REPO_URI}:${IMAGE_TAG}
          echo "image=${REPO_URI}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}
          kubectl get nodes

      - name: Determine namespace
        id: ns
        run: |
          if [[ "${GITHUB_REF##*/}" == "main" ]]; then
            echo "namespace=production" >> $GITHUB_OUTPUT
          else
            echo "namespace=staging" >> $GITHUB_OUTPUT
          fi

      - name: Apply Kubernetes manifests
        run: |
          NAMESPACE=${{ steps.ns.outputs.namespace }}
          kubectl apply -f k8s/namespaces.yaml
          sed "s/namespace: staging/namespace: $NAMESPACE/g" k8s/deployment.yaml | kubectl apply -f -
          sed "s/namespace: staging/namespace: $NAMESPACE/g" k8s/service.yaml | kubectl apply -f -
          sed "s/namespace: staging/namespace: $NAMESPACE/g" k8s/ingress.yaml | kubectl apply -f -

      - name: Update Deployment image
        run: |
          NAMESPACE=${{ steps.ns.outputs.namespace }}
          kubectl -n $NAMESPACE set image deployment/credcars-backend credcars-backend=${{ steps.build-image.outputs.image }} --record


      - name: Wait for rollout
        run: |
          NAMESPACE=${{ steps.ns.outputs.namespace }}
          kubectl -n $NAMESPACE rollout status deployment/credcars-backend --timeout=3m